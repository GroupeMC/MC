/*
 * CharlesFuntionsUtilitaires.c
 *
 *  Created on: 8 févr. 2020
 *      Author: chalo
 */

/*
 * Fonctions Utilitaires

// Cette fonction inverse l' état de la sortie à chaque fois qu' elle est appelée
HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

// Insert delay 100 ms
HAL_Delay(100);

// Lecture des entrées. GPIOx est le PORT, une lettre et GPIO_Pin le numéro de la broche concerné.
// La fonction renvoie la valeur « bitstatus » pouvant être GPIO_PIN_SETou GPIO_PIN_RESET
GPIO_PinState bitstatus = HAL_GPIO_ReadPin(USER_GPIO_Port, USER_Pin);

// Mise à 0 de la sortie
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
GPIOA->ODR &= ~(1<<5);

// Mise à 1 de la sortie
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
GPIOA->ODR |= (1<<5);

// Recuperation de l'etat du bit 13 du port C
int value_C13 = ( GPIOC->IDR & (1 << 13) ) >> 13;


*/

#include "CharlesFuntionsUtilitaires.h"

/*
 * Lire l'entrée n° N d'un port GPIO
 * Renvoie soit 0 soit 1, suivant l'état de l'entrée
*/
int LIRE_ENTREE( GPIO_TypeDef *GPIOx, int N){

	if (GPIOx->IDR & (0x1 << N)) {
		return 1;
	}
	else {
		return 0;
	}
}

/*
 * Inverse l'état de la sortie n° N d'un port GPIO
*/
void INVERSE_ETAT_SORTIE(__IO uint32_t *ODR, int N){

	(*ODR) ^= (0x1 << N);
}

/*
 * Mise de la sortie à 0
*/
void MISE_SORTIE_0(__IO uint32_t* ODR, int N){

	(*ODR) &= ~(0x1 << N);
}

/*
 * Mise de la sortie à 1
*/
void MISE_SORTIE_1(__IO uint32_t* ODR, int N){

	(*ODR) |= (0x1 << N);
}

